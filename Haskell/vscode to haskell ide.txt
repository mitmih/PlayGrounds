# linter        hoovercj.haskell-linter
https://marketplace.visualstudio.com/items?itemName=hoovercj.haskell-linter
stack install hlint
hlint --version
code --install-extension hoovercj.haskell-linter
    "haskell.hlint.executablePath": "/home/wsl2/.local/bin/hlint",
    "haskell.hlint.ignore": [],
    "haskell.hlint.hints": [],


# IDE           haskell.haskell
https://github.com/haskell/haskell-language-server
https://marketplace.visualstudio.com/items?itemName=haskell.haskell
find -type f -name *haskell-lang*
    "haskell.languageServerVariant": "haskell-ide-engine",
    "haskell.serverExecutablePath": "/home/wsl2/.local/bin/hie",
    "[haskell]": {
        "editor.defaultFormatter": "MaxGabriel.brittany"
    },


# debugger      phoityne.phoityne-vscode
https://marketplace.visualstudio.com/items?itemName=phoityne.phoityne-vscode
https://github.com/phoityne/hdx4vsc/tree/master/configs
stack install haskell-dap ghci-dap haskell-debug-adapter
phoityne.phoityne-vscode
curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh


# formatter     MaxGabriel.brittany
https://github.com/lspitzner/brittany#installation
https://marketplace.visualstudio.com/items?itemName=MaxGabriel.brittany
stack install brittany # --resolver lts-13.25 # --resolver lts-10.0
brittany --version
code --install-extension maxgabriel.brittany
    "files.associations": {
        "*.hs": "haskell",
    },
    "brittany.path": "/home/wsl2/.local/bin/brittany",
    "brittany.keepCRLF": true




wsl --distribution ubuntu --user wsl2 --exec id -u
HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Lxss\{GUID}

# перезапуск
wsl --terminate ubuntu ; wsl --distribution ubuntu --user wsl2

# экспорт
wsl --terminate ubuntu ; wsl --export ubuntu D:\ubuntu.tar

# импорт
wsl --terminate ubuntu
wsl --unregister ubuntu
wsl --import ubuntu C:\ubuntu D:\ubuntu.tar
Set-WSLDefaultUser ubuntu wsl2  # custom function from profile





module Main where

import Lib
import Data.List (unwords)

main :: IO ()
main = someFunc

x = (1 + 2)
y = putStrLn x

-- ex :: [String]
-- ex = ["this", "is", "an"]

-- print :: IO ()